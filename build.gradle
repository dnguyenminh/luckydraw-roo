buildscript {
    gradle.startParameter.initScripts = new ArrayList<>()
}

plugins {
    id 'org.springframework.boot' version '3.4.5' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
    id 'java'
    id 'com.github.node-gradle.node' version '3.5.1' apply false
    // Temporarily comment out checkstyle until we fix it
    // id 'checkstyle'
}

// Apply to all projects
allprojects {
    group = 'vn.com.fecredit.app'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    // Temporarily comment out checkstyle configuration
    /*
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = '10.12.4'
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        showViolations = true
        // Make checkstyle less strict for now
        ignoreFailures = true
    }
    */
}

// Apply to all subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:3.4.5")
        }
    }

    dependencies {
        // Add these dependency alignments to all subprojects
        implementation 'org.hibernate.orm:hibernate-core:6.6.13.Final'
        implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

        // Add Lombok to all subprojects
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Testing dependencies
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mockito:mockito-core:5.3.1'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'

        // Apache POI for Excel handling
        implementation 'org.apache.poi:poi:5.2.3'
        implementation 'org.apache.poi:poi-ooxml:5.2.3'
    }

    // Add compiler options to suppress common warnings
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs += [
            '-parameters'
        ]
    }

    test {
        useJUnitPlatform()
    }
}

// Define webapp-specific configuration
if (project.findProject(':webapp') != null) {
    project(':webapp') {
        apply plugin: 'com.github.node-gradle.node'

        node {
            version = '16.13.1'
            download = true
            workDir = file("${project.buildDir}/nodejs")
            npmWorkDir = file("${project.buildDir}/npm")
        }

        tasks.register('npmBuild', Exec) {
            description = 'Run npm build'
            workingDir = projectDir
            commandLine 'npm', 'run', 'build'
        }
    }
}

// Main application specific configurations
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


dependencies {
    // Main app depends on all modules
    implementation project(':entity')
    implementation project(':repository')
    implementation project(':service')
    implementation project(':controller')
    implementation project(':security')

    // Database
    runtimeOnly 'com.h2database:h2'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Apache POI for Excel handling
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
}

// Only define these tasks if the frontend directory exists
def frontendDir = file("${project.projectDir}/frontend")
if (frontendDir.exists()) {
    tasks.register('installFrontend', Exec) {
        description = 'Install frontend dependencies'
        workingDir = frontendDir
        commandLine = getOsSpecificCommand(['npm', 'install'])
    }

    tasks.register('buildFrontend', Exec) {
        description = 'Build frontend'
        workingDir = frontendDir
        commandLine = getOsSpecificCommand(['npm', 'run', 'build'])
        dependsOn installFrontend
    }

    tasks.register('copyFrontendBuild', Copy) {
        description = 'Copy frontend build to static resources'
        from "${project.projectDir}/frontend/out"
        into "${project.buildDir}/resources/main/static"
        dependsOn buildFrontend
        // Only run if the output directory exists
        onlyIf { file("${project.projectDir}/frontend/out").exists() }
    }

    bootJar {
        dependsOn copyFrontendBuild
    }

    bootRun {
        dependsOn copyFrontendBuild
    }

    // Fix for the task dependency issue - add explicit dependency on copyFrontendBuild
    tasks.named('resolveMainClassName') {
        dependsOn copyFrontendBuild
    }

    // Add explicit dependency from jar task to copyFrontendBuild with proper input/output declaration
    tasks.named('jar') {
        dependsOn copyFrontendBuild
        from copyFrontendBuild.outputs
        doFirst {
            println "Including frontend resources from: ${project.buildDir}/resources/main/static"
        }
    }
} else {
    // If frontend doesn't exist, provide empty tasks
    tasks.register('installFrontend') {
        description = 'Dummy task for projects without frontend'
    }

    tasks.register('buildFrontend') {
        description = 'Dummy task for projects without frontend'
    }

    tasks.register('copyFrontendBuild') {
        description = 'Dummy task for projects without frontend'
    }

    // Fix for the task dependency issue - make sure resolveMainClassName depends on the dummy task too
    tasks.named('resolveMainClassName') {
        dependsOn tasks.named('copyFrontendBuild')
    }

    // Add dependency for jar task on the dummy copyFrontendBuild task
    tasks.named('jar') {
        dependsOn tasks.named('copyFrontendBuild')
        doFirst {
            println "No frontend resources to include (frontend directory not found)"
        }
    }
}

// Helper method to get OS-specific command (adds cmd /c prefix for Windows)
def getOsSpecificCommand(List<String> command) {
    def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
    if (isWindows) {
        return ['cmd', '/c'] + command
    }
    return command
}
